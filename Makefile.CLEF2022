CLEF_DATA_PATH=/home/kai.labusch/qurator/HIPE-2022-data/data/v2.1
RESULT_PATH=data/HIPE2022
SUBMISSION_PATH=/home/kai.labusch/qurator/HIPE-2022-data/data/submission

MAX_DIST ?= 0.05
MAX_CANDIDATES ?= 25
MAX_FREQUENCY ?= 1000
NED_THRESHOLD ?= 0.2

NED_PARAMS ?=md$(MAX_DIST)_mc$(MAX_CANDIDATES)_mf$(MAX_FREQUENCY)_nthr$(NED_THRESHOLD)
NED_JSON_PARAMS ?=md$(MAX_DIST)_mc$(MAX_CANDIDATES)_mf$(MAX_FREQUENCY)

FIND_ENTITY_PARAMS ?=--ned-threshold=$(NED_THRESHOLD) --max-candidates=$(MAX_CANDIDATES) --max-dist=$(MAX_DIST) 

NED_ENDPOINTS?='{"de": "http://localhost:5015", "fr": "http://localhost:5016", "en": "http://localhost:5017"}'

RUNNUMBER?= 1
TEAM?=SBB
TASKBUNDLEID=bundle5

HISTO_NORM_FILE=/home/labusch/qurator/HIPE-2022-eval/HIPE-scorer/historico-fuzzy-QID-mapping-ID-mapping.tsv

define CREATE_SUBMISSION_NAME
import sys,re,os

infile = sys.argv[1]
taskbundleid = sys.argv[2]
lang = sys.argv[3]
team = sys.argv[4]
runnumber = sys.argv[5]

infile = os.path.basename(infile)
#print("{}: {}, {}".format(infile, taskbundleid, lang, team, runnumber))

m = re.match(r'neat-HIPE-2022-v2.1-(\w+)-test.*', infile)

if not m:
	raise RuntimeError("File name does not match!")

datasetalias = m.group(1)

print("{}_{}_{}_{}_{}.tsv".format(team, taskbundleid, datasetalias, lang, runnumber))
endef
export CREATE_SUBMISSION_NAME

define GS_FILENAME

import sys,re,os
infile = sys.argv[1]
ned_params = sys.argv[2]
lang = sys.argv[3]
taskbundleid = sys.argv[4]

dirname = os.path.dirname(infile)
infile = os.path.basename(infile)

# print(infile)

m = re.match('prediction-neat-HIPE-2022-v2.1-(\w+)-([\w-]+)-{}-.*.tsv'.format(lang), infile)

if not m:
	raise RuntimeError("File name does not match!")

datasetalias = m.group(1)

kind_of_dataset = m.group(2)

if kind_of_dataset.startswith('test'):
	gs_dataset = 'test'
else:
	gs_dataset = kind_of_dataset

print("{}/HIPE-2022-v2.1-{}-{}-{}.tsv ".format(dirname, datasetalias, gs_dataset , lang))

endef
export GS_FILENAME

# Convert the CLEF-TSVs into the TSV-format that is understood by neat and tools like find-entities
%-neat-tsvs:
	find $(CLEF_DATA_PATH) -wholename "*/$*/HIPE-2022*.tsv" | parallel 'clef2tsv-2022 {} `dirname {}`/neat-`basename {}`'

neat-tsvs:	de-neat-tsvs fr-neat-tsvs en-neat-tsvs

# Convert the neat - prediction TSVs (starting with ned-full) back into CLEF-format files (starting with prediction-) that is understood by the hipe-scorer
%-prediction-tsvs:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*test?ELmasked*.tsv"`;do tsv2clef-2022 `dirname $$i`/ned-full-`basename -s .tsv $$i`-$(NED_PARAMS)-$(TASKBUNDLEID).tsv $$i `dirname $$i`/prediction-`basename -s .tsv $$i`-$(NED_PARAMS)-$(TASKBUNDLEID).tsv;done

prediction-tsvs:	de-prediction-tsvs fr-prediction-tsvs en-prediction-tsvs

# Create properly named submission files
%-clef-submission:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*test?ELmasked*.tsv"`;do tsv2clef-2022 `dirname $$i`/ned-full-`basename -s .tsv $$i`-$(NED_PARAMS)-$(TASKBUNDLEID).tsv $$i $(SUBMISSION_PATH)/`python -c "$$CREATE_SUBMISSION_NAME" "$$i" $(TASKBUNDLEID) "$*" $(TEAM) $(RUNNUMBER)`;done

submission: de-clef-submission fr-clef-submission en-clef-submission

# remove all the neat TSVs
clean-%-tsvs:
	find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*.tsv" -exec rm -f {} \;

clean-tsvs:	clean-de-tsvs clean-fr-tsvs clean-en-tsvs


# The following 3 targets create EL-only prediction TSV files in neat format that start with ned-full--
%-dev-ned:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*dev*.tsv"`;do find-entities $(FIND_ENTITY_PARAMS) --noproxy --ned-json-file=`dirname $$i`/`basename -s .tsv $$i`-$(NED_JSON_PARAMS).json --ned-rest-endpoints=$(NED_ENDPOINTS) --lang $* --context-split  --not-after-context-field "hipe2022:date" $$i `dirname $$i`/ned-full-`basename -s .tsv $$i`-$(NED_PARAMS)-$(TASKBUNDLEID).tsv ;done

%-train-ned:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*train*.tsv"`;do find-entities $(FIND_ENTITY_PARAMS) --noproxy --ned-json-file=`dirname $$i`/`basename -s .tsv $$i`-$(NED_JSON_PARAMS).json --ned-rest-endpoints=$(NED_ENDPOINTS) --lang $* --context-split  --not-after-context-field "hipe2022:date" $$i `dirname $$i`/ned-full-`basename -s .tsv $$i`-$(NED_PARAMS)-$(TASKBUNDLEID).tsv ;done

%-test-ELmasked-ned:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*test?ELmasked*.tsv"`;do find-entities $(FIND_ENTITY_PARAMS) --noproxy --ned-json-file=`dirname $$i`/`basename -s .tsv $$i`-$(NED_JSON_PARAMS).json --ned-rest-endpoints=$(NED_ENDPOINTS) --lang $* --context-split  --not-after-context-field "hipe2022:date" $$i `dirname $$i`/ned-full-`basename -s .tsv $$i`-$(NED_PARAMS)-$(TASKBUNDLEID).tsv ;done

dev-ned:	de-dev-ned fr-dev-ned en-dev-ned

train-ned:	de-train-ned fr-train-ned en-train-ned

test-ELmasked-ned:	de-test-ELmasked-ned fr-test-ELmasked-ned en-test-ELmasked-ned


# Create pickled dataframes with decider training data for each dataset
%-train-stat:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/neat-*train*.tsv"`;do sentence-stat-2022 --context-split $$i `dirname $$i`/`basename -s .tsv $$i`-$(NED_JSON_PARAMS).json $$i `dirname $$i`/train-data-`basename -s .tsv $$i`-$(NED_PARAMS).pkl; done

# Join all the pickled dataframes into one big file for decider training over all datasets.
%-train-data:
	mkdir -p $(RESULT_PATH)
	df-concatenate --reset-index $(RESULT_PATH)/$*-train-$(NED_JSON_PARAMS).pkl `find $(CLEF_DATA_PATH) -wholename "*/$*/train-data*-$(NED_PARAMS).pkl" -printf "%p "`

# Perform the decider training per language
%-decider:
	train-decider $(RESULT_PATH)/$*-train-$(NED_JSON_PARAMS).pkl $(RESULT_PATH)/$*-decider-$(NED_JSON_PARAMS).pkl > $(RESULT_PATH)/$*-decider-$(NED_JSON_PARAMS).log 2>&1

train-stat: de-train-stat fr-train-stat en-train-stat

train-data: de-train-data fr-train-data en-train-data

decider: de-decider fr-decider en-decider

# Joined target that does the complete required chain in order to train the deciders
%-train-all: %-train-ned %-train-stat %-train-data %-decider ;

train-all: de-train-all fr-train-all en-train-all

# Starts EL-webservice with a decider that has been trained for MAX_DIST=0.05 and MAX_CANDIDATES=25
de-service:
	env CONFIG=de-HIPE2022.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5015
fr-service:
	env CONFIG=fr-HIPE2022.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5016
en-service:
	env CONFIG=en-HIPE2022.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5017

# Starts EL-webservice with a decider that has been trained for MAX_DIST=0.13 and MAX_CANDIDATES=50
de-service-2:
	env CONFIG=de-HIPE2022-2.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5015
fr-service-2:
	env CONFIG=fr-HIPE2022-2.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5016
en-service-2:
	env CONFIG=en-HIPE2022-2.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5017

# Starts EL-webservice in no-decider mode. Only suitable in order to generate decider training data.
de-service-no-decider:
	env CONFIG=de-config-no-decider.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5015
fr-service-no-decider:
	env CONFIG=fr-config-no-decider.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5016
en-service-no-decider:
	env CONFIG=en-config-no-decider.json env FLASK_APP=qurator/sbb_ned/webapp/app.py env FLASK_ENV=development env USE_CUDA=True flask run --host=0.0.0.0 --port=5017

%-normalize-linking:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/HIPE-2022-v2.1-*-test-$**.tsv"`;do normalize-linking -i $$i -o `dirname $$i`/`basename -s .tsv $$i`-normalized.tsv --hipe_edition=hipe-2022 --norm-time --norm-histo -m $(HISTO_NORM_FILE);done

%-scoring-test:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/prediction-neat-HIPE-2022-v2.1-*-test?ELmasked-$**.tsv"`;do ls -lh `python -c "$$GS_FILENAME" "$$i" "$(NED_PARAMS)" "$*" "$(TASKBUNDLEID)"`;done

%-scoring:
	for i in `find $(CLEF_DATA_PATH) -wholename "*/$*/prediction-neat-HIPE-2022-v2.1-*-test?ELmasked-$**.tsv"`;do hipe-scorer --pred=$$i --ref=`python -c "$$GS_FILENAME" "$$i" "$(NED_PARAMS)" "$*" "$(TASKBUNDLEID)"` --task=nel --n_best=1 --suffix=eval --skip-check --hipe_edition=hipe-2022 --outdir=test --log=test.log;done

test-iterate-threshold:
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.05
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.1
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.15
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.2
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.25
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.3
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.35
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.4
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.45
	make -f Makefile.CLEF2022 test-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.5

test-iterate:
	make -f Makefile.CLEF2022 test-iterate-threshold MAX_CANDIDATES=25 MAX_DIST=0.05
	make -f Makefile.CLEF2022 test-iterate-threshold MAX_CANDIDATES=50 MAX_DIST=0.13


dev-iterate-threshold:
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.05
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.1
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.15
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.2
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.25
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.3
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.35
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.4
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.45
	make -f Makefile.CLEF2022 dev-ELmasked-ned MAX_CANDIDATES=$(MAX_CANDIDATES) MAX_DIST=$(MAX_DIST) NED_THRESHOLD=0.5

dev-iterate:
	make -f Makefile.CLEF2022 dev-iterate-threshold MAX_CANDIDATES=25 MAX_DIST=0.05
	make -f Makefile.CLEF2022 dev-iterate-threshold MAX_CANDIDATES=50 MAX_DIST=0.13

